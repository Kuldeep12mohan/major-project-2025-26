generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum CourseType {
  OE
  DE
  CORE
  HM
}

enum RegStatus {
  PENDING
  VERIFIED
  APPROVED
  REJECTED
}

enum Mode {
  A
  B
  C
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String?
  role     Role

  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  adminProfile   AdminProfile?
}

model StudentProfile {
  id       Int   @id @default(autoincrement())
  user     User  @relation(fields: [userId], references: [id])
  userId   Int   @unique

  enrollNo   String @unique
  facultyNo  String @unique
  semester   Int
  dept       String

  teacher    TeacherProfile?  @relation(fields: [teacherId], references: [id])
  teacherId  Int?

  tempRegistrations TempRegistration[]
  registrations     Registration[]
}

model TeacherProfile {
  id       Int   @id @default(autoincrement())
  user     User  @relation(fields: [userId], references: [id])
  userId   Int   @unique

  employeeId  String @unique
  designation String
  dept        String

  courses       Course[]           @relation("TeacherCourses")
  verifications TempRegistration[] @relation("VerifierRelation")


  students      StudentProfile[] 
}

model AdminProfile {
  id       Int   @id @default(autoincrement())
  user     User  @relation(fields: [userId], references: [id])
  userId   Int   @unique

  adminId  String @unique

  approvals            TempRegistration[]  @relation("AdminRelation")
}

model Course {
  id        Int       @id @default(autoincrement())
  code      String     @unique
  title     String
  type      CourseType @default(CORE)
  credits   Int
  semester  Int
  dept      String
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tempRegistrations TempRegistration[]
  registrations     Registration[]
  teachers          TeacherProfile[] @relation("TeacherCourses")
}

model TempRegistration {
  id         Int             @id @default(autoincrement())
  student    StudentProfile  @relation(fields: [studentId], references: [id])
  studentId  Int
  course     Course          @relation(fields: [courseId], references: [id])
  courseId   Int
  status     RegStatus       @default(PENDING)
  mode       Mode            @default(A)

  verifier   TeacherProfile? @relation("VerifierRelation", fields: [verifierId], references: [id])
  verifierId Int?

  admin      AdminProfile?   @relation("AdminRelation", fields: [adminId], references: [id])
  adminId    Int?

  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Registration {
  id        Int            @id @default(autoincrement())
  student   StudentProfile  @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course          @relation(fields: [courseId], references: [id])
  courseId  Int
  mode      Mode            @default(A)
  semester  Int
  year      Int
  createdAt DateTime        @default(now())
}

model RegistrationStatus {
  id         Int      @id @default(autoincrement())
  isOpen     Boolean  @default(false)
  startDate  DateTime?
  endDate    DateTime?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}
